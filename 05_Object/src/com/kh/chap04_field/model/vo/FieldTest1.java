package com.kh.chap04_field.model.vo;


	
	/*
	 * >> 변수 구분
	 * 
	 *  - 전역 변수 : 클래스 영역에 바로 선언한 변수 --> 클래스 내에서면 어디서든 전역으로 다 사용 가능하다 (외우는 팁! 전 지역!)
	 *  - 지역 변수 : 클래스 영역내에서 어떤 특정한 구역 ({}) 에 선언한 변수 --> 선언된 해당 그 지역에서만 사용됨.
	 *  						* 특정한 구역 : 메소드 {}, 제어문 (if, for){} 등
	 *  - 클래스 변수 == static 변수 => 예약어 쓸 수 있는데, static이라는 걸 쓰면 클래스 변수가 된다.
	 *  생성시점 : 프로그램 실행과 동시에 무조건 메모리 영역에 할당! => static 영역에!
	 *  소멸시점 : 프로그램 종료와 함께, 동시에 소멸.
	 *  
	 *  - 지역 변수
	 *  생성시점 : 지역변수가 속해있는 특정한 구역 호출(실행)시 메모리 영역에 할당.
	 *  소멸시점 : 특정한 구역({}) 종료시 소멸.
	 *  
	 */
	
public class FieldTest1 {					// 클래스 시작
	
	// 전역변수 == 멤버변수 == 인스턴트 변수
	
	private int global;						// 선언만 해둠.
	
	public void test(int num) {					// test 메소드 영역 시작
		// 매개변수 : 일정의 지역변수, 즉 메소드 영역 내에서만 쓸 수 있음.
		
		// int local;						// 지역변수 (메소드 영역 내에 선언)
		// => 지역변수에는 접근제한자를 붙이면 안 된다. 또한 값을 붙이는 것이 가능하다.
		int local = 10;						// 사용자가 직접 값을 매겨야 한다.
		
		System.out.println(global); // 초기화 안 되어 있음. 오류 x. heap 영역에 생성될 때까지 초기화 x.
		// 멤버변수 출력 => 멤버변수는 해당 이 객체 생성 시 JVM이 기본값으로라도 초기화.
		
		System.out.println(num);
		// 매개변수 출력 => 매개변수는 해당 이 메소드 호출시 반드시 값이 전달될 것이기 때문이 초기화 안 되어 있어도 됨.
		// 초기화 안 되어 있음. 근데 오류 안 남. 매개 변수로 무조건 하나는 넘겨야 하니까 값을 초기화.
		
		System.out.println(local);			// 초기화가 안 되어 있어서 오류.
											// 값을 주면 오류가 뜨지 않는다.

	}										// test 메소드 끝.
	
	
	
	
/*
	private int a;							// 전역 변수
	
	public void method1() {					
		int b = 10;							// 지역 변수
		
		if(true) {
			int c = 3;
		}
		
	}
	
	// b = 20;								** 쓸 수가 없음.
	int a1 = 15;					
	
*/
}											// 클래스 끝
